# Deploy in-line ETCd cluster #
# Configure Namespace
export NAMESPACE=storageos

# Create Namespace
kubectl create namespace $NAMESPACE

# Install the StorageOS Cluster Operator using the following yaml manifest.
kubectl create -f https://github.com/storageos/cluster-operator/releases/download/v2.3.3/storageos-operator.yaml

# Verify the Cluster Operator Pod Status is Running
kubectl -n storageos-operator get po -w

cat <<END > secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "storageos-api"
  namespace: "storageos-operator"
  labels:
    app: "storageos"
type: "kubernetes.io/storageos"
data:
  # echo -n '<secret>' | base64
  apiUsername: c3RvcmFnZW9z
  apiPassword: c3RvcmFnZW9z
  # CSI Credentials
  csiProvisionUsername: c3RvcmFnZW9z
  csiProvisionPassword: c3RvcmFnZW9z
  csiControllerPublishUsername: c3RvcmFnZW9z
  csiControllerPublishPassword: c3RvcmFnZW9z
  csiNodePublishUsername: c3RvcmFnZW9z
  csiNodePublishPassword: c3RvcmFnZW9z
  csiControllerExpandUsername: c3RvcmFnZW9z
  csiControllerExpandPassword: c3RvcmFnZW9z
END
# Copy service/storageos-etcd-client CLUSTER-IP to cluster.yaml kvBackend address.
kubectl -n storageos-etcd get pod,svc
cat <<END > cluster.yaml - Chance address to ClusterIP of ETCd Node.
apiVersion: "storageos.com/v1"
kind: StorageOSCluster
metadata:
  name: "example-storageos"
  namespace: "storageos-operator"
spec:
  # StorageOS Pods are in kube-system by default
  secretRefName: "storageos-api" # Reference from the Secret created in the previous step
  secretRefNamespace: "storageos-operator"  # Namespace of the Secret
  k8sDistro: "upstream"
  images:
    nodeContainer: "storageos/node:v2.3.3" # StorageOS version
  kvBackend:
    address: '10.101.15.159:2379' # Example address, change for your etcd endpoint
  # address: '10.42.15.23:2379,10.42.12.22:2379,10.42.13.16:2379' # You can set ETCD server ips
  resources:
    requests:
      memory: "512Mi"
      cpu: 1
#  nodeSelectorTerms:
#    - matchExpressions:
#      - key: "node-role.kubernetes.io/worker" # Compute node label will vary according to your installation
#        operator: In
#        values:
#        - "true"
END
# Launch StorageOSCluster
kubectl apply -f ./

# Wait for all Pod Status Running.
kubectl -n kube-system get pods -w

# Change StorageOS from ClusterIP to NodePort.
kubectl patch -n kube-system svc storageos --type='json' -p '[{"op":"replace","path":"/spec/type","value":"NodePort"}]'


# Create test PVC, generate and attach test pod
kubectl create -f - <<END
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins2
spec:
  storageClassName: storageosnfs
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 8Gi
END

kubectl create -f - <<END
apiVersion: v1
kind: Pod
metadata:
 name: test2
spec:
 containers:
   - name: debian
     image: debian:9-slim
     command: ["/bin/sleep"]
     args: [ "3600" ]
     volumeMounts:
       - mountPath: /mnt
         name: v1
 volumes:
   - name: v1
     persistentVolumeClaim:
       claimName: jenkins
END

kubectl exec -it test2 -- bash
